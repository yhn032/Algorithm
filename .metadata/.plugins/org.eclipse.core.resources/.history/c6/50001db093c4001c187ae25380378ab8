package Kakao;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

/*
	각 유저당 한 번에 1명 신고가능
	단, 동일인물에 대해서 신고횟수는 1로 count. 한 사람이 특정인물을 여러번 신고해도 count되지 않음
	신고한 사람이 이용정지가 되면 그 사람을 신고한 사람에게 메일 전송을 하는데 이 횟수를 출력하라.(return, id_list에 담긴 순서대로)
*/


class Solution3 {
    public int[] solution(String[] id_list, String[] report, int k) {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st;
    	int count=0;
    	String [][] result = new String[id_list.length][2];
    	
    	for(int i=0; i<report.length;i++) {
    		result[i] = report[i].split(" ");
    	}
    	
    	Arrays.sort(result);
    	
        int[] answer = {};
        return answer;
    }
}
public class ReceiveIncriminateResult {
	public static void main(String[] args) {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int count=0;
		int k = 2;
		
		String id_list[] = {"muzi", "frodo", "apeach", "neo"};
		String report[]  = {"muzi frodo","apeach frodo","frodo neo","muzi neo","apeach muzi"};
		int answer[] = new int[id_list.length];
		
		//신고 내역 
		String [][] result = new String[report.length][2];

		//유저별로 신고당한 횟수를 저장
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		//유저별로 신고한 유저를 저장
		HashMap<String, HashSet<String>> map2 = new HashMap<String, HashSet<String>>();
			
		//map.put(name, map.getOrDefault(name, 0)+1); //기본적으로 신고를 당한 사람은 1부터 시작 -> 근데 이런 경우에는 동일인물이 신고해도 카운트가 되므로 오류
		for(int i=0; i<id_list.length;i++) {
			String name = id_list[i];//피신고자의 이름
			map.put(name, i); //신고자에 대해서 인덱스값과 함께 저장
			map2.put(name, new HashSet<String>());
		}
		
		//System.out.printf("%s %d\n", name,map.get(name)); //value값이 k라면 이용정지 대상입니다.
		
		for(int i=0; i<report.length;i++) {
			result[i] = report[i].split(" ");
			//신고한 사람의 ID
			String a = result[i][0];
			//신고당한 사람의 ID
			String b = result[i][1];
			
			//신고당항 사람의 id와 매핑된 value값에다가 신고한 사람의 id를 추가한다. 단, HashSet의 특성상 중복은 불가능하다. -> 한 사람이 여러번 신고해도 1 count
			map2.get(b).add(a);
		}
		
		//map2를 순환
		for(int i=0; i<id_list.length;i++) {
			HashSet<String> send = map2.get(id_list[i]);
			if(send.size() >= k) { //이용 정지대상
				//아까 정한 임의의 인덱스로 id_list에 저장된 id와 같은 순서로 메일통보 횟수 저장
				answer[map.get(id_list[i])]++;
				System.out.println(answer[i]);
			}
		}
		
		
		
		/*
			1. String, integer 형태의 map으로 전체 유저에 대한 임의의 인덱스 값을 저장  -> 나중에 배열에 메일 받을 횟수를 저장하기 위해 인덱스 위치를 지정해주는 것
			2. String, HashSet<> 형태의 map으로 전체 유저에 대해 유저가 신고한 사람을 저장. set을 사용한 이유는 한사람의 유저가 같은 사람을 반복적으로 신고했을때, 신고횟수를 카운트 하지 않기 위함이다. 
			3. 신고받은 사람이 나올때마다 배열에 인덱스를 사용해 접근하여 값을 1씩 증가시킨다. 
			4. 값이 >= k인 사람을 신고한 사람에게만 메일 전송 
		*/
		
		
		
		//Arrays.sort(result);
		
		/*
		 * for(int i=0; i<result.length;i++) { for(int k=0; k<result[i].length; k++) {
		 * System.out.print(result[i][k] + " "); } System.out.println(); }
		 */
	}
}
