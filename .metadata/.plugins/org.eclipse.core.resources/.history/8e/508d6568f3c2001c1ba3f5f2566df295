package Queue;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class _1966 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		//테스트 데이터의 개수 
		int T = Integer.parseInt(br.readLine());
		
		while(T-- > 0) {
			
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			//문서의 개수
			int N = Integer.parseInt(st.nextToken());
			//내가 궁금한 문서의 위치
			int M = Integer.parseInt(st.nextToken());
			
			LinkedList<int[]> q = new LinkedList<>();
			st = new StringTokenizer(br.readLine());
			
			//큐에 중요도와 위치(인덱스)데이터 저장
			for(int i=0; i<N; i++) {
				//큐에 각 요소를  int[] 배열형태로 저장하는데, 크기가 2인 1차원 정수형 배열로 저장한다. int a[] = new int[] {인덱스, 중요도}; 와 같은 형식.
				q.add(new int[] {i, Integer.parseInt(st.nextToken())});
			}
			
			//출력횟수를 카운트 해줄 변수
			int count = 0;
			
			while(!q.isEmpty()) {
				
				boolean can = true; 
				
				//큐가 반환한 int[]aaa = {인덱스, 중요도};의 배열 객체를 front참조변수가 가리킬수 있도록 front[0] -> 인덱스 값, front[1] -> 중요도 
				int front[] = q.poll();
				
				//중요도 값을 모두 비교해서 큐 안에서 가장 큰 값인지 비교 
				//뽑은 값과, 아직 큐에 남아있는 모든 요소들 한 번씩 비교하기 때문에 상태변수가 true라면 바로 뽑아버려도 됨
				for(int [] s : q) {
					if(s[1] > front[1])
						can = false;
				}

				if(can) {
					count++;
					if(front[0]==M) break;
				}else
					q.add(front);
				
			}
			
			sb.append(count).append('\n');
		}
		System.out.println(sb);
		

	
		
		/*
		Iterator<Integer> iter = q.iterator();
		while(iter.hasNext()) {
			
		}
		*/
		//잠시 보류,,, 
		
		
	}
}
